{"version":3,"sources":["../../../node_modules/dotenv/package.json","../../../node_modules/dotenv/lib/main.js","../src/stripe-client.ts","../src/customer.service.ts","../src/subscription.service.ts","../src/payment.service.ts","../src/invoice.service.ts","../src/portal.service.ts","../src/webhook.service.ts"],"sourcesContent":["{\n  \"name\": \"dotenv\",\n  \"version\": \"16.5.0\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap run --allow-empty-coverage --disable-coverage --timeout=60000\",\n    \"test:coverage\": \"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"homepage\": \"https://github.com/motdotla/dotenv#readme\",\n  \"funding\": \"https://dotenvx.com\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.2\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^19.2.0\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n","const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n    err.code = 'MISSING_DATA'\n    throw err\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing key part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')\n    err.code = 'INVALID_DOTENV_KEY'\n    throw err\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'\n    throw err\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let possibleVaultPath = null\n\n  if (options && options.path && options.path.length > 0) {\n    if (Array.isArray(options.path)) {\n      for (const filepath of options.path) {\n        if (fs.existsSync(filepath)) {\n          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`\n        }\n      }\n    } else {\n      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`\n    }\n  } else {\n    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')\n  }\n\n  if (fs.existsSync(possibleVaultPath)) {\n    return possibleVaultPath\n  }\n\n  return null\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  const debug = Boolean(options && options.debug)\n  if (debug) {\n    _debug('Loading env from encrypted .env.vault')\n  }\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  const dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options && options.encoding) {\n    encoding = options.encoding\n  } else {\n    if (debug) {\n      _debug('No encoding is specified. UTF-8 is used by default')\n    }\n  }\n\n  let optionPaths = [dotenvPath] // default, look for .env\n  if (options && options.path) {\n    if (!Array.isArray(options.path)) {\n      optionPaths = [_resolveHome(options.path)]\n    } else {\n      optionPaths = [] // reset default\n      for (const filepath of options.path) {\n        optionPaths.push(_resolveHome(filepath))\n      }\n    }\n  }\n\n  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n  // parsed data, we will combine it with process.env (or options.processEnv if provided).\n  let lastError\n  const parsedAll = {}\n  for (const path of optionPaths) {\n    try {\n      // Specifying an encoding returns a string instead of a buffer\n      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))\n\n      DotenvModule.populate(parsedAll, parsed, options)\n    } catch (e) {\n      if (debug) {\n        _debug(`Failed to load ${path} ${e.message}`)\n      }\n      lastError = e\n    }\n  }\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsedAll, options)\n\n  if (lastError) {\n    return { parsed: parsedAll, error: lastError }\n  } else {\n    return { parsed: parsedAll }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  const vaultPath = _vaultPath(options)\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!vaultPath) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.subarray(0, 12)\n  const authTag = ciphertext.subarray(-16)\n  ciphertext = ciphertext.subarray(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')\n      err.code = 'INVALID_DOTENV_KEY'\n      throw err\n    } else if (decryptionFailed) {\n      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')\n      err.code = 'DECRYPTION_FAILED'\n      throw err\n    } else {\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n    err.code = 'OBJECT_REQUIRED'\n    throw err\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","import Stripe from 'stripe';\nimport * as dotenv from 'dotenv';\n\n// Load environment variables from .env file\ndotenv.config({ path: '../../../.env' });\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.warn(\n    'STRIPE_SECRET_KEY is not set in environment variables. Using dummy key for development.'\n  );\n}\n\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || 'sk_test_dummy', {\n  apiVersion: '2023-10-16',\n  typescript: true,\n});\n\nexport const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET || '';\n","import { stripe } from './stripe-client';\nimport type { Stripe } from 'stripe';\n\nexport class CustomerService {\n  /**\n   * Create a new Stripe customer for an organization\n   */\n  async createCustomer(params: {\n    organizationId: string;\n    email: string;\n    name?: string;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.Customer> {\n    const customer = await stripe.customers.create({\n      email: params.email,\n      name: params.name,\n      metadata: {\n        organizationId: params.organizationId,\n        ...params.metadata,\n      },\n    });\n\n    return customer;\n  }\n\n  /**\n   * Retrieve a customer by Stripe customer ID\n   */\n  async getCustomer(customerId: string): Promise<Stripe.Customer | null> {\n    try {\n      const customer = await stripe.customers.retrieve(customerId);\n      if (customer.deleted) {\n        return null;\n      }\n      return customer as Stripe.Customer;\n    } catch (error) {\n      console.error('Error retrieving customer:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update customer details\n   */\n  async updateCustomer(\n    customerId: string,\n    params: {\n      email?: string;\n      name?: string;\n      metadata?: Record<string, string>;\n    }\n  ): Promise<Stripe.Customer> {\n    const customer = await stripe.customers.update(customerId, params);\n    return customer;\n  }\n\n  /**\n   * Delete a customer (soft delete in Stripe)\n   */\n  async deleteCustomer(customerId: string): Promise<Stripe.DeletedCustomer> {\n    const deleted = await stripe.customers.del(customerId);\n    return deleted;\n  }\n\n  /**\n   * List all payment methods for a customer\n   */\n  async listPaymentMethods(\n    customerId: string,\n    type: 'card' | 'us_bank_account' = 'card'\n  ): Promise<Stripe.PaymentMethod[]> {\n    const paymentMethods = await stripe.paymentMethods.list({\n      customer: customerId,\n      type,\n    });\n\n    return paymentMethods.data;\n  }\n\n  /**\n   * Get the default payment method for a customer\n   */\n  async getDefaultPaymentMethod(customerId: string): Promise<Stripe.PaymentMethod | null> {\n    const customer = await this.getCustomer(customerId);\n    if (!customer || !customer.invoice_settings.default_payment_method) {\n      return null;\n    }\n\n    const paymentMethodId = customer.invoice_settings.default_payment_method;\n    if (typeof paymentMethodId === 'string') {\n      const paymentMethod = await stripe.paymentMethods.retrieve(paymentMethodId);\n      return paymentMethod;\n    }\n\n    return null;\n  }\n\n  /**\n   * Set default payment method for a customer\n   */\n  async setDefaultPaymentMethod(\n    customerId: string,\n    paymentMethodId: string\n  ): Promise<Stripe.Customer> {\n    const customer = await stripe.customers.update(customerId, {\n      invoice_settings: {\n        default_payment_method: paymentMethodId,\n      },\n    });\n\n    return customer;\n  }\n\n  /**\n   * Attach a payment method to a customer\n   */\n  async attachPaymentMethod(\n    customerId: string,\n    paymentMethodId: string\n  ): Promise<Stripe.PaymentMethod> {\n    const paymentMethod = await stripe.paymentMethods.attach(paymentMethodId, {\n      customer: customerId,\n    });\n\n    return paymentMethod;\n  }\n\n  /**\n   * Detach a payment method from a customer\n   */\n  async detachPaymentMethod(paymentMethodId: string): Promise<Stripe.PaymentMethod> {\n    const paymentMethod = await stripe.paymentMethods.detach(paymentMethodId);\n    return paymentMethod;\n  }\n}\n","import { stripe } from './stripe-client';\nimport type { Stripe } from 'stripe';\n\nexport class SubscriptionService {\n  /**\n   * Create a new subscription for a customer\n   */\n  async createSubscription(params: {\n    customerId: string;\n    priceId: string;\n    trialDays?: number;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.Subscription> {\n    const subscription = await stripe.subscriptions.create({\n      customer: params.customerId,\n      items: [{ price: params.priceId }],\n      payment_behavior: 'default_incomplete',\n      payment_settings: { save_default_payment_method: 'on_subscription' },\n      expand: ['latest_invoice.payment_intent'],\n      trial_period_days: params.trialDays,\n      metadata: params.metadata,\n    });\n\n    return subscription;\n  }\n\n  /**\n   * Retrieve a subscription\n   */\n  async getSubscription(subscriptionId: string): Promise<Stripe.Subscription | null> {\n    try {\n      const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n      return subscription;\n    } catch (error) {\n      console.error('Error retrieving subscription:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update a subscription (change plan)\n   */\n  async updateSubscription(\n    subscriptionId: string,\n    params: {\n      priceId?: string;\n      quantity?: number;\n      prorationBehavior?: 'create_prorations' | 'none' | 'always_invoice';\n      metadata?: Record<string, string>;\n    }\n  ): Promise<Stripe.Subscription> {\n    const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n\n    const updateParams: Stripe.SubscriptionUpdateParams = {\n      metadata: params.metadata,\n      proration_behavior: params.prorationBehavior || 'create_prorations',\n    };\n\n    // If changing price, we need to update the subscription items\n    if (params.priceId && subscription.items.data.length > 0) {\n      updateParams.items = [\n        {\n          id: subscription.items.data[0].id,\n          price: params.priceId,\n          quantity: params.quantity,\n        },\n      ];\n    }\n\n    const updated = await stripe.subscriptions.update(subscriptionId, updateParams);\n    return updated;\n  }\n\n  /**\n   * Cancel a subscription\n   */\n  async cancelSubscription(\n    subscriptionId: string,\n    params: {\n      cancelAtPeriodEnd?: boolean;\n      cancellationReason?: string;\n    } = {}\n  ): Promise<Stripe.Subscription> {\n    if (params.cancelAtPeriodEnd) {\n      // Cancel at end of billing period\n      const subscription = await stripe.subscriptions.update(subscriptionId, {\n        cancel_at_period_end: true,\n        cancellation_details: {\n          comment: params.cancellationReason,\n        },\n      });\n      return subscription;\n    } else {\n      // Cancel immediately\n      const subscription = await stripe.subscriptions.cancel(subscriptionId, {\n        cancellation_details: {\n          comment: params.cancellationReason,\n        },\n      });\n      return subscription;\n    }\n  }\n\n  /**\n   * Reactivate a canceled subscription (if still in period)\n   */\n  async reactivateSubscription(subscriptionId: string): Promise<Stripe.Subscription> {\n    const subscription = await stripe.subscriptions.update(subscriptionId, {\n      cancel_at_period_end: false,\n    });\n    return subscription;\n  }\n\n  /**\n   * Pause a subscription\n   */\n  async pauseSubscription(\n    subscriptionId: string,\n    params: {\n      behavior: 'keep_as_draft' | 'mark_uncollectible' | 'void';\n      resumes_at?: number;\n    }\n  ): Promise<Stripe.Subscription> {\n    const subscription = await stripe.subscriptions.update(subscriptionId, {\n      pause_collection: {\n        behavior: params.behavior,\n        resumes_at: params.resumes_at,\n      },\n    });\n    return subscription;\n  }\n\n  /**\n   * Resume a paused subscription\n   */\n  async resumeSubscription(subscriptionId: string): Promise<Stripe.Subscription> {\n    const subscription = await stripe.subscriptions.update(subscriptionId, {\n      pause_collection: null,\n    });\n    return subscription;\n  }\n\n  /**\n   * List all subscriptions for a customer\n   */\n  async listSubscriptions(\n    customerId: string,\n    params: {\n      status?: 'active' | 'past_due' | 'unpaid' | 'canceled' | 'incomplete' | 'trialing';\n      limit?: number;\n    } = {}\n  ): Promise<Stripe.Subscription[]> {\n    const subscriptions = await stripe.subscriptions.list({\n      customer: customerId,\n      status: params.status,\n      limit: params.limit || 10,\n    });\n\n    return subscriptions.data;\n  }\n\n  /**\n   * Get the active subscription for a customer\n   */\n  async getActiveSubscription(customerId: string): Promise<Stripe.Subscription | null> {\n    const subscriptions = await this.listSubscriptions(customerId, { status: 'active' });\n    return subscriptions.length > 0 ? subscriptions[0] : null;\n  }\n\n  /**\n   * Create a subscription schedule for future changes\n   */\n  async createSubscriptionSchedule(params: {\n    customerId: string;\n    phases: Array<{\n      priceId: string;\n      quantity?: number;\n      duration?: number; // in months\n      trial?: boolean;\n    }>;\n    startDate?: number;\n  }): Promise<Stripe.SubscriptionSchedule> {\n    const phases = params.phases.map((phase, index) => ({\n      items: [{ price: phase.priceId, quantity: phase.quantity || 1 }],\n      iterations: phase.duration || 1,\n      trial: phase.trial || false,\n    }));\n\n    const schedule = await stripe.subscriptionSchedules.create({\n      customer: params.customerId,\n      start_date: params.startDate || 'now',\n      phases,\n    });\n\n    return schedule;\n  }\n\n  /**\n   * Preview proration for a subscription change\n   */\n  async previewProration(\n    subscriptionId: string,\n    params: {\n      priceId: string;\n      quantity?: number;\n    }\n  ): Promise<Stripe.Invoice> {\n    const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n\n    const items = [\n      {\n        id: subscription.items.data[0].id,\n        price: params.priceId,\n        quantity: params.quantity || 1,\n      },\n    ];\n\n    const invoice = await stripe.invoices.retrieveUpcoming({\n      customer: subscription.customer as string,\n      subscription: subscriptionId,\n      subscription_items: items,\n      subscription_proration_behavior: 'create_prorations',\n    });\n\n    return invoice as any;\n  }\n}\n","import { stripe } from './stripe-client';\nimport type { Stripe } from 'stripe';\n\nexport class PaymentService {\n  /**\n   * Create a checkout session for new subscriptions\n   */\n  async createCheckoutSession(params: {\n    customerId?: string;\n    customerEmail?: string;\n    priceId: string;\n    successUrl: string;\n    cancelUrl: string;\n    trialDays?: number;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.Checkout.Session> {\n    const sessionParams: Stripe.Checkout.SessionCreateParams = {\n      mode: 'subscription',\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price: params.priceId,\n          quantity: 1,\n        },\n      ],\n      success_url: params.successUrl,\n      cancel_url: params.cancelUrl,\n      metadata: params.metadata,\n      subscription_data: {\n        trial_period_days: params.trialDays,\n      },\n    };\n\n    if (params.customerId) {\n      sessionParams.customer = params.customerId;\n    } else if (params.customerEmail) {\n      sessionParams.customer_email = params.customerEmail;\n    }\n\n    const session = await stripe.checkout.sessions.create(sessionParams);\n    return session;\n  }\n\n  /**\n   * Create a setup intent for adding payment methods\n   */\n  async createSetupIntent(params: {\n    customerId: string;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.SetupIntent> {\n    const setupIntent = await stripe.setupIntents.create({\n      customer: params.customerId,\n      payment_method_types: ['card'],\n      metadata: params.metadata,\n    });\n\n    return setupIntent;\n  }\n\n  /**\n   * Create a payment intent for one-time payments\n   */\n  async createPaymentIntent(params: {\n    customerId: string;\n    amount: number;\n    currency?: string;\n    paymentMethodId?: string;\n    confirm?: boolean;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.PaymentIntent> {\n    const paymentIntent = await stripe.paymentIntents.create({\n      customer: params.customerId,\n      amount: params.amount,\n      currency: params.currency || 'usd',\n      payment_method: params.paymentMethodId,\n      confirm: params.confirm,\n      automatic_payment_methods: {\n        enabled: true,\n      },\n      metadata: params.metadata,\n    });\n\n    return paymentIntent;\n  }\n\n  /**\n   * Confirm a payment intent\n   */\n  async confirmPaymentIntent(\n    paymentIntentId: string,\n    params: {\n      paymentMethodId?: string;\n      returnUrl?: string;\n    }\n  ): Promise<Stripe.PaymentIntent> {\n    const paymentIntent = await stripe.paymentIntents.confirm(paymentIntentId, {\n      payment_method: params.paymentMethodId,\n      return_url: params.returnUrl,\n    });\n\n    return paymentIntent;\n  }\n\n  /**\n   * Retrieve a payment intent\n   */\n  async getPaymentIntent(paymentIntentId: string): Promise<Stripe.PaymentIntent | null> {\n    try {\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      return paymentIntent;\n    } catch (error) {\n      console.error('Error retrieving payment intent:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Create a refund\n   */\n  async createRefund(params: {\n    paymentIntentId?: string;\n    chargeId?: string;\n    amount?: number;\n    reason?: 'duplicate' | 'fraudulent' | 'requested_by_customer';\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.Refund> {\n    const refundParams: Stripe.RefundCreateParams = {\n      amount: params.amount,\n      reason: params.reason,\n      metadata: params.metadata,\n    };\n\n    if (params.paymentIntentId) {\n      refundParams.payment_intent = params.paymentIntentId;\n    } else if (params.chargeId) {\n      refundParams.charge = params.chargeId;\n    }\n\n    const refund = await stripe.refunds.create(refundParams);\n    return refund;\n  }\n\n  /**\n   * List charges for a customer\n   */\n  async listCharges(\n    customerId: string,\n    params: {\n      limit?: number;\n      starting_after?: string;\n    } = {}\n  ): Promise<Stripe.Charge[]> {\n    const charges = await stripe.charges.list({\n      customer: customerId,\n      limit: params.limit || 10,\n      starting_after: params.starting_after,\n    });\n\n    return charges.data;\n  }\n\n  /**\n   * Retrieve a charge\n   */\n  async getCharge(chargeId: string): Promise<Stripe.Charge | null> {\n    try {\n      const charge = await stripe.charges.retrieve(chargeId);\n      return charge;\n    } catch (error) {\n      console.error('Error retrieving charge:', error);\n      return null;\n    }\n  }\n}\n","import { stripe } from './stripe-client';\nimport type { Stripe } from 'stripe';\n\nexport class InvoiceService {\n  /**\n   * Retrieve an invoice\n   */\n  async getInvoice(invoiceId: string): Promise<Stripe.Invoice | null> {\n    try {\n      const invoice = await stripe.invoices.retrieve(invoiceId);\n      return invoice;\n    } catch (error) {\n      console.error('Error retrieving invoice:', error);\n      return null;\n    }\n  }\n\n  /**\n   * List invoices for a customer\n   */\n  async listInvoices(\n    customerId: string,\n    params: {\n      status?: 'draft' | 'open' | 'paid' | 'uncollectible' | 'void';\n      limit?: number;\n      starting_after?: string;\n    } = {}\n  ): Promise<Stripe.Invoice[]> {\n    const invoices = await stripe.invoices.list({\n      customer: customerId,\n      status: params.status,\n      limit: params.limit || 10,\n      starting_after: params.starting_after,\n    });\n\n    return invoices.data;\n  }\n\n  /**\n   * Create a manual invoice\n   */\n  async createInvoice(params: {\n    customerId: string;\n    description?: string;\n    metadata?: Record<string, string>;\n    auto_advance?: boolean;\n  }): Promise<Stripe.Invoice> {\n    const invoice = await stripe.invoices.create({\n      customer: params.customerId,\n      description: params.description,\n      metadata: params.metadata,\n      auto_advance: params.auto_advance ?? true,\n    });\n\n    return invoice;\n  }\n\n  /**\n   * Add line items to an invoice\n   */\n  async addInvoiceItem(params: {\n    customerId: string;\n    invoiceId?: string;\n    amount: number;\n    currency?: string;\n    description: string;\n    metadata?: Record<string, string>;\n  }): Promise<Stripe.InvoiceItem> {\n    const item = await stripe.invoiceItems.create({\n      customer: params.customerId,\n      invoice: params.invoiceId,\n      amount: params.amount,\n      currency: params.currency || 'usd',\n      description: params.description,\n      metadata: params.metadata,\n    });\n\n    return item;\n  }\n\n  /**\n   * Finalize an invoice (make it ready for payment)\n   */\n  async finalizeInvoice(\n    invoiceId: string,\n    params: {\n      auto_advance?: boolean;\n    } = {}\n  ): Promise<Stripe.Invoice> {\n    const invoice = await stripe.invoices.finalizeInvoice(invoiceId, {\n      auto_advance: params.auto_advance ?? true,\n    });\n\n    return invoice;\n  }\n\n  /**\n   * Send an invoice to the customer\n   */\n  async sendInvoice(invoiceId: string): Promise<Stripe.Invoice> {\n    const invoice = await stripe.invoices.sendInvoice(invoiceId);\n    return invoice;\n  }\n\n  /**\n   * Pay an invoice manually\n   */\n  async payInvoice(\n    invoiceId: string,\n    params: {\n      paymentMethodId?: string;\n      source?: string;\n    } = {}\n  ): Promise<Stripe.Invoice> {\n    const invoice = await stripe.invoices.pay(invoiceId, {\n      payment_method: params.paymentMethodId,\n      source: params.source,\n    });\n\n    return invoice;\n  }\n\n  /**\n   * Void an invoice\n   */\n  async voidInvoice(invoiceId: string): Promise<Stripe.Invoice> {\n    const invoice = await stripe.invoices.voidInvoice(invoiceId);\n    return invoice;\n  }\n\n  /**\n   * Mark an invoice as uncollectible\n   */\n  async markUncollectible(invoiceId: string): Promise<Stripe.Invoice> {\n    const invoice = await stripe.invoices.markUncollectible(invoiceId);\n    return invoice;\n  }\n\n  /**\n   * Retrieve upcoming invoice (preview next invoice)\n   */\n  async getUpcomingInvoice(\n    customerId: string,\n    params: {\n      subscriptionId?: string;\n    } = {}\n  ): Promise<Stripe.UpcomingInvoice | null> {\n    try {\n      const invoice = await stripe.invoices.retrieveUpcoming({\n        customer: customerId,\n        subscription: params.subscriptionId,\n      });\n      return invoice;\n    } catch (error) {\n      console.error('Error retrieving upcoming invoice:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Download invoice PDF\n   */\n  async getInvoicePdfUrl(invoiceId: string): Promise<string | null> {\n    const invoice = await this.getInvoice(invoiceId);\n    return invoice?.invoice_pdf || null;\n  }\n}\n","import type { Stripe } from 'stripe';\n\nimport { stripe } from './stripe-client';\n\nexport class PortalService {\n  /**\n   * Create a customer portal session\n   */\n  async createPortalSession(params: {\n    customerId: string;\n    returnUrl: string;\n  }): Promise<Stripe.BillingPortal.Session> {\n    const session = await stripe.billingPortal.sessions.create({\n      customer: params.customerId,\n      return_url: params.returnUrl,\n    });\n\n    return session;\n  }\n\n  /**\n   * Configure the customer portal settings\n   */\n  async configurePortal(params: {\n    businessProfile: {\n      headline?: string;\n      privacy_policy_url?: string;\n      terms_of_service_url?: string;\n    };\n    features?: {\n      customer_update?: {\n        enabled: boolean;\n        allowed_updates?: Array<'email' | 'tax_id' | 'address' | 'shipping' | 'phone' | 'name'>;\n      };\n      invoice_history?: {\n        enabled: boolean;\n      };\n      payment_method_update?: {\n        enabled: boolean;\n      };\n      subscription_cancel?: {\n        enabled: boolean;\n        mode?: 'at_period_end' | 'immediately';\n        cancellation_reason?: {\n          enabled: boolean;\n          options: Array<\n            | 'too_expensive'\n            | 'missing_features'\n            | 'switched_service'\n            | 'unused'\n            | 'customer_service'\n            | 'too_complex'\n            | 'low_quality'\n            | 'other'\n          >;\n        };\n      };\n      subscription_pause?: {\n        enabled: boolean;\n      };\n      subscription_update?: {\n        enabled: boolean;\n        default_allowed_updates?: Array<'price' | 'quantity' | 'promotion_code'>;\n        proration_behavior?: 'create_prorations' | 'none' | 'always_invoice';\n        products?: Array<{\n          product: string;\n          prices: Array<string>;\n        }>;\n      };\n    };\n  }): Promise<Stripe.BillingPortal.Configuration> {\n    const configuration = await stripe.billingPortal.configurations.create({\n      business_profile: params.businessProfile,\n      features: (params.features || {\n        customer_update: {\n          enabled: true,\n          allowed_updates: ['email', 'address', 'phone', 'name'],\n        },\n        invoice_history: {\n          enabled: true,\n        },\n        payment_method_update: {\n          enabled: true,\n        },\n        subscription_cancel: {\n          enabled: true,\n          mode: 'at_period_end',\n          cancellation_reason: {\n            enabled: true,\n            options: [\n              'too_expensive',\n              'missing_features',\n              'switched_service',\n              'unused',\n              'customer_service',\n              'too_complex',\n              'low_quality',\n              'other',\n            ],\n          },\n        },\n        subscription_pause: {\n          enabled: false,\n        },\n        subscription_update: {\n          enabled: true,\n          default_allowed_updates: ['price'],\n          proration_behavior: 'create_prorations',\n          products: [],\n        },\n      }) as Stripe.BillingPortal.ConfigurationCreateParams['features'],\n    });\n\n    return configuration;\n  }\n\n  /**\n   * Update portal configuration\n   */\n  async updatePortalConfiguration(\n    configurationId: string,\n    params: Partial<Stripe.BillingPortal.ConfigurationUpdateParams>\n  ): Promise<Stripe.BillingPortal.Configuration> {\n    const configuration = await stripe.billingPortal.configurations.update(configurationId, params);\n\n    return configuration;\n  }\n\n  /**\n   * List portal configurations\n   */\n  async listPortalConfigurations(\n    params: {\n      limit?: number;\n      active?: boolean;\n    } = {}\n  ): Promise<Stripe.BillingPortal.Configuration[]> {\n    const configurations = await stripe.billingPortal.configurations.list({\n      limit: params.limit || 10,\n      active: params.active,\n    });\n\n    return configurations.data;\n  }\n}\n","import { stripe, STRIPE_WEBHOOK_SECRET } from './stripe-client';\nimport type { Stripe } from 'stripe';\nimport { createServiceLogger } from '@terrashaper/shared';\n\nconst logger = createServiceLogger('stripe-webhook');\n\nexport class WebhookService {\n  /**\n   * Verify webhook signature and construct event\n   */\n  async constructEvent(payload: string | Buffer, signature: string): Promise<Stripe.Event> {\n    try {\n      const event = stripe.webhooks.constructEvent(payload, signature, STRIPE_WEBHOOK_SECRET);\n      return event;\n    } catch (error) {\n      logger.error('Webhook signature verification failed', error as Error);\n      throw new Error('Invalid webhook signature');\n    }\n  }\n\n  /**\n   * Handle customer.created event\n   */\n  async handleCustomerCreated(customer: Stripe.Customer): Promise<void> {\n    logger.info('Customer created', { customerId: customer.id });\n    // Update database with Stripe customer ID\n  }\n\n  /**\n   * Handle customer.subscription.created event\n   */\n  async handleSubscriptionCreated(subscription: Stripe.Subscription): Promise<void> {\n    logger.info('Subscription created', {\n      subscriptionId: subscription.id,\n      customerId: subscription.customer,\n    });\n    // Update organization with subscription details\n  }\n\n  /**\n   * Handle customer.subscription.updated event\n   */\n  async handleSubscriptionUpdated(subscription: Stripe.Subscription): Promise<void> {\n    logger.info('Subscription updated', {\n      subscriptionId: subscription.id,\n      status: subscription.status,\n    });\n    // Update organization subscription status\n  }\n\n  /**\n   * Handle customer.subscription.deleted event\n   */\n  async handleSubscriptionDeleted(subscription: Stripe.Subscription): Promise<void> {\n    logger.info('Subscription deleted', {\n      subscriptionId: subscription.id,\n      customerId: subscription.customer,\n    });\n    // Handle subscription cancellation\n  }\n\n  /**\n   * Handle invoice.paid event\n   */\n  async handleInvoicePaid(invoice: Stripe.Invoice): Promise<void> {\n    logger.info('Invoice paid', {\n      invoiceId: invoice.id,\n      amountPaid: invoice.amount_paid,\n      customerId: invoice.customer,\n    });\n    // Record payment in database\n  }\n\n  /**\n   * Handle invoice.payment_failed event\n   */\n  async handleInvoicePaymentFailed(invoice: Stripe.Invoice): Promise<void> {\n    logger.warn('Invoice payment failed', {\n      invoiceId: invoice.id,\n      attemptCount: invoice.attempt_count,\n      customerId: invoice.customer,\n    });\n    // Handle failed payment\n  }\n\n  /**\n   * Handle payment_intent.succeeded event\n   */\n  async handlePaymentIntentSucceeded(paymentIntent: Stripe.PaymentIntent): Promise<void> {\n    logger.info('Payment intent succeeded', {\n      paymentIntentId: paymentIntent.id,\n      amount: paymentIntent.amount,\n    });\n    // Record successful payment\n  }\n\n  /**\n   * Handle payment_method.attached event\n   */\n  async handlePaymentMethodAttached(paymentMethod: Stripe.PaymentMethod): Promise<void> {\n    logger.info('Payment method attached', {\n      paymentMethodId: paymentMethod.id,\n      type: paymentMethod.type,\n      customerId: paymentMethod.customer,\n    });\n    // Store payment method details\n  }\n\n  /**\n   * Main webhook handler\n   */\n  async handleWebhook(event: Stripe.Event): Promise<void> {\n    switch (event.type) {\n      case 'customer.created':\n        await this.handleCustomerCreated(event.data.object as Stripe.Customer);\n        break;\n\n      case 'customer.subscription.created':\n        await this.handleSubscriptionCreated(event.data.object as Stripe.Subscription);\n        break;\n\n      case 'customer.subscription.updated':\n        await this.handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\n        break;\n\n      case 'customer.subscription.deleted':\n        await this.handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\n        break;\n\n      case 'invoice.paid':\n        await this.handleInvoicePaid(event.data.object as Stripe.Invoice);\n        break;\n\n      case 'invoice.payment_failed':\n        await this.handleInvoicePaymentFailed(event.data.object as Stripe.Invoice);\n        break;\n\n      case 'payment_intent.succeeded':\n        await this.handlePaymentIntentSucceeded(event.data.object as Stripe.PaymentIntent);\n        break;\n\n      case 'payment_method.attached':\n        await this.handlePaymentMethodAttached(event.data.object as Stripe.PaymentMethod);\n        break;\n\n      case 'checkout.session.completed':\n        // Handle checkout session completion\n        const session = event.data.object as Stripe.Checkout.Session;\n        logger.info('Checkout session completed', {\n          sessionId: session.id,\n          customerId: session.customer,\n        });\n        break;\n\n      default:\n        logger.debug('Unhandled webhook event type', { eventType: event.type, eventId: event.id });\n    }\n  }\n}\n"],"mappings":"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","names":["path","config"]}