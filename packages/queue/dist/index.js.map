{"version":3,"sources":["../src/index.ts","../src/queues/render.queue.ts","../src/config.ts","../src/events.ts"],"sourcesContent":["export * from './queues/render.queue';\nexport * from './types';\nexport * from './config';\nexport * from './events';","import { Queue, Worker, QueueEvents, Job, ConnectionOptions } from 'bullmq';\nimport { RenderJobData, RenderJobResult } from '../types';\nimport { QUEUE_NAMES, QUEUE_PRIORITIES, defaultQueueOptions } from '../config';\n\nlet renderQueue: Queue<RenderJobData, RenderJobResult> | null = null;\nlet renderQueueEvents: QueueEvents | null = null;\n\nexport function getRenderQueue(connection?: ConnectionOptions): Queue<RenderJobData, RenderJobResult> {\n  if (!renderQueue) {\n    renderQueue = new Queue<RenderJobData, RenderJobResult>(\n      QUEUE_NAMES.RENDER,\n      {\n        ...defaultQueueOptions,\n        ...(connection && { connection }),\n      }\n    );\n  }\n  return renderQueue;\n}\n\nexport function getRenderQueueEvents(connection?: ConnectionOptions): QueueEvents {\n  if (!renderQueueEvents) {\n    renderQueueEvents = new QueueEvents(QUEUE_NAMES.RENDER, {\n      connection: connection || defaultQueueOptions.connection,\n    });\n  }\n  return renderQueueEvents;\n}\n\nexport async function addRenderJob(\n  data: RenderJobData,\n  options?: {\n    priority?: number;\n    delay?: number;\n  }\n): Promise<Job<RenderJobData, RenderJobResult>> {\n  const queue = getRenderQueue();\n  \n  // Set priority based on subscription tier\n  const priority = options?.priority ?? QUEUE_PRIORITIES[data.subscriptionTier.toUpperCase() as keyof typeof QUEUE_PRIORITIES];\n  \n  return queue.add('render', data, {\n    priority,\n    delay: options?.delay,\n  });\n}\n\nexport function createRenderWorker(\n  processFunction: (job: Job<RenderJobData>) => Promise<RenderJobResult>,\n  connection?: ConnectionOptions,\n  concurrency = 5\n): Worker<RenderJobData, RenderJobResult> {\n  return new Worker<RenderJobData, RenderJobResult>(\n    QUEUE_NAMES.RENDER,\n    processFunction,\n    {\n      connection: connection || defaultQueueOptions.connection,\n      concurrency,\n      autorun: true,\n    }\n  );\n}\n\n// Rate limiting helpers\nexport async function getRenderJobCount(userId: string, windowMs = 60000): Promise<number> {\n  const queue = getRenderQueue();\n  const jobs = await queue.getJobs(['active', 'waiting', 'delayed']);\n  const cutoff = Date.now() - windowMs;\n  \n  return jobs.filter(job => \n    job.data.userId === userId && \n    (job.timestamp || 0) > cutoff\n  ).length;\n}\n\nexport async function canUserSubmitRender(\n  userId: string,\n  subscriptionTier: 'starter' | 'pro' | 'growth'\n): Promise<{ allowed: boolean; reason?: string }> {\n  const limits = {\n    starter: { perMinute: 2, perHour: 20 },\n    pro: { perMinute: 10, perHour: 100 },\n    growth: { perMinute: 20, perHour: 300 },\n  };\n  \n  const limit = limits[subscriptionTier];\n  const minuteCount = await getRenderJobCount(userId, 60000);\n  const hourCount = await getRenderJobCount(userId, 3600000);\n  \n  if (minuteCount >= limit.perMinute) {\n    return { \n      allowed: false, \n      reason: `Rate limit exceeded: ${limit.perMinute} renders per minute` \n    };\n  }\n  \n  if (hourCount >= limit.perHour) {\n    return { \n      allowed: false, \n      reason: `Rate limit exceeded: ${limit.perHour} renders per hour` \n    };\n  }\n  \n  return { allowed: true };\n}\n\n// Queue metrics\nexport async function getQueueMetrics() {\n  const queue = getRenderQueue();\n  \n  const [waiting, active, completed, failed, delayed] = await Promise.all([\n    queue.getWaitingCount(),\n    queue.getActiveCount(),\n    queue.getCompletedCount(),\n    queue.getFailedCount(),\n    queue.getDelayedCount(),\n  ]);\n  \n  // BullMQ doesn't have getPausedCount in newer versions\n  const paused = 0;\n  \n  return {\n    waiting,\n    active,\n    completed,\n    failed,\n    delayed,\n    paused,\n    total: waiting + active + delayed + paused,\n  };\n}\n\n// Cleanup on shutdown\nexport async function closeRenderQueue() {\n  if (renderQueue) {\n    await renderQueue.close();\n    renderQueue = null;\n  }\n  if (renderQueueEvents) {\n    await renderQueueEvents.close();\n    renderQueueEvents = null;\n  }\n}","import { ConnectionOptions, QueueOptions } from 'bullmq';\n\n// Parse Upstash Redis URL if provided\nfunction getRedisConnection(): ConnectionOptions {\n  const redisHost = process.env.REDIS_HOST;\n  \n  // If REDIS_HOST is a URL (Upstash format)\n  if (redisHost && redisHost.startsWith('https://')) {\n    const url = new URL(redisHost);\n    return {\n      host: url.hostname,\n      port: parseInt(process.env.REDIS_PORT || '6379'),\n      password: process.env.REDIS_PASSWORD,\n      tls: {},\n      maxRetriesPerRequest: null,\n    };\n  }\n  \n  // Standard Redis connection\n  return {\n    host: redisHost || 'localhost',\n    port: parseInt(process.env.REDIS_PORT || '6379'),\n    password: process.env.REDIS_PASSWORD,\n    maxRetriesPerRequest: null,\n  };\n}\n\nexport const redisConnection: ConnectionOptions = getRedisConnection();\n\nexport const defaultQueueOptions: QueueOptions = {\n  connection: redisConnection,\n  defaultJobOptions: {\n    attempts: 3,\n    backoff: {\n      type: 'exponential',\n      delay: 1000,\n    },\n    removeOnComplete: {\n      age: 3600, // 1 hour\n      count: 100,\n    },\n    removeOnFail: {\n      age: 24 * 3600, // 24 hours\n    },\n  },\n};\n\nexport const QUEUE_NAMES = {\n  RENDER: 'renderQueue',\n  NOTIFICATION: 'notificationQueue',\n} as const;\n\nexport const QUEUE_PRIORITIES = {\n  STARTER: 5,\n  PRO: 3,\n  GROWTH: 1,\n} as const;","import { EventEmitter } from 'events';\nimport { QueueEvents } from 'bullmq';\nimport { getRenderQueueEvents } from './queues/render.queue';\n\nexport interface RenderQueueEventData {\n  progress: { jobId: string; progress: number };\n  completed: { jobId: string; result: any };\n  failed: { jobId: string; error: Error };\n}\n\nclass QueueEventEmitter extends EventEmitter {\n  private queueEvents!: QueueEvents;\n  private initialized = false;\n\n  constructor() {\n    super();\n    this.setMaxListeners(100); // Allow many SSE connections\n  }\n\n  initialize() {\n    if (this.initialized) return;\n    \n    this.queueEvents = getRenderQueueEvents();\n    \n    // Set up queue event listeners\n    this.queueEvents.on('progress', (data) => {\n      this.emit('progress', {\n        jobId: data.jobId,\n        progress: data.data,\n      });\n    });\n\n    this.queueEvents.on('completed', (data) => {\n      this.emit('completed', {\n        jobId: data.jobId,\n        result: data.returnvalue,\n      });\n    });\n\n    this.queueEvents.on('failed', (data) => {\n      this.emit('failed', {\n        jobId: data.jobId,\n        error: new Error(data.failedReason || 'Job failed'),\n      });\n    });\n\n    this.initialized = true;\n  }\n\n  async close() {\n    if (this.queueEvents) {\n      await this.queueEvents.close();\n    }\n    this.removeAllListeners();\n  }\n}\n\n// Singleton instance\nlet queueEventEmitter: QueueEventEmitter | null = null;\n\nexport function getQueueEventEmitter(): QueueEventEmitter {\n  if (!queueEventEmitter) {\n    queueEventEmitter = new QueueEventEmitter();\n    queueEventEmitter.initialize();\n  }\n  return queueEventEmitter;\n}\n\nexport { getRenderQueueEvents };"],"mappings":"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","names":[]}