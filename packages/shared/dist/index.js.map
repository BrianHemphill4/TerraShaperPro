{"version":3,"sources":["../src/index.ts","../src/types/team.ts","../src/types/client-portal.ts","../src/types/billing.ts","../src/types/onboarding.ts","../src/services/feature-gate.service.ts"],"sourcesContent":["export * from './types/team';\nexport * from './types/client-portal';\nexport * from './types/billing';\nexport * from './types/onboarding';\nexport * from './services/feature-gate.service';","import { z } from 'zod';\n\nexport const UserRoleEnum = z.enum(['owner', 'admin', 'designer', 'member', 'viewer']);\nexport type UserRole = z.infer<typeof UserRoleEnum>;\n\nexport const UserSchema = z.object({\n  id: z.string().uuid(),\n  clerk_id: z.string(),\n  email: z.string().email(),\n  full_name: z.string().nullable(),\n  organization_id: z.string().uuid(),\n  role: UserRoleEnum,\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type User = z.infer<typeof UserSchema>;\n\nexport const InvitationSchema = z.object({\n  id: z.string().uuid(),\n  organization_id: z.string().uuid(),\n  email: z.string().email(),\n  role: UserRoleEnum,\n  invited_by: z.string().uuid(),\n  token: z.string(),\n  expires_at: z.string().datetime(),\n  accepted_at: z.string().datetime().nullable(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type Invitation = z.infer<typeof InvitationSchema>;\n\nexport const ActivityLogSchema = z.object({\n  id: z.string().uuid(),\n  organization_id: z.string().uuid(),\n  user_id: z.string().uuid().nullable(),\n  action: z.string(),\n  entity_type: z.string(),\n  entity_id: z.string().uuid().nullable(),\n  metadata: z.record(z.any()).default({}),\n  ip_address: z.string().nullable(),\n  user_agent: z.string().nullable(),\n  created_at: z.string().datetime(),\n});\n\nexport type ActivityLog = z.infer<typeof ActivityLogSchema>;\n\n// Input schemas for API operations\nexport const CreateInvitationSchema = z.object({\n  email: z.string().email(),\n  role: UserRoleEnum,\n});\n\nexport type CreateInvitationInput = z.infer<typeof CreateInvitationSchema>;\n\nexport const UpdateUserRoleSchema = z.object({\n  userId: z.string().uuid(),\n  role: UserRoleEnum,\n});\n\nexport type UpdateUserRoleInput = z.infer<typeof UpdateUserRoleSchema>;\n\nexport const AcceptInvitationSchema = z.object({\n  token: z.string(),\n});\n\nexport type AcceptInvitationInput = z.infer<typeof AcceptInvitationSchema>;\n\n// Permission helpers\nexport const roleHierarchy: Record<UserRole, number> = {\n  owner: 5,\n  admin: 4,\n  designer: 3,\n  member: 2,\n  viewer: 1,\n};\n\nexport function hasPermission(userRole: UserRole, requiredRole: UserRole): boolean {\n  return roleHierarchy[userRole] >= roleHierarchy[requiredRole];\n}\n\n// Activity log action types\nexport const ActivityActions = {\n  // User management\n  USER_INVITED: 'user.invited',\n  USER_JOINED: 'user.joined',\n  USER_ROLE_CHANGED: 'user.role_changed',\n  USER_REMOVED: 'user.removed',\n  \n  // Project actions\n  PROJECT_CREATED: 'project.created',\n  PROJECT_UPDATED: 'project.updated',\n  PROJECT_DELETED: 'project.deleted',\n  PROJECT_SHARED: 'project.shared',\n  \n  // Render actions\n  RENDER_STARTED: 'render.started',\n  RENDER_COMPLETED: 'render.completed',\n  RENDER_FAILED: 'render.failed',\n  \n  // Organization actions\n  ORG_SETTINGS_UPDATED: 'org.settings_updated',\n  ORG_SUBSCRIPTION_CHANGED: 'org.subscription_changed',\n} as const;\n\nexport type ActivityAction = typeof ActivityActions[keyof typeof ActivityActions];","import { z } from 'zod';\n\nexport const ClientPermissionsSchema = z.object({\n  view: z.boolean().default(true),\n  comment: z.boolean().default(true),\n  approve: z.boolean().default(false),\n});\n\nexport type ClientPermissions = z.infer<typeof ClientPermissionsSchema>;\n\nexport const ClientAccessLinkSchema = z.object({\n  id: z.string().uuid(),\n  project_id: z.string().uuid(),\n  created_by: z.string().uuid(),\n  token: z.string(),\n  client_email: z.string().email().nullable(),\n  client_name: z.string().nullable(),\n  permissions: ClientPermissionsSchema,\n  expires_at: z.string().datetime().nullable(),\n  last_accessed_at: z.string().datetime().nullable(),\n  access_count: z.number().int().default(0),\n  is_active: z.boolean().default(true),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type ClientAccessLink = z.infer<typeof ClientAccessLinkSchema>;\n\nexport const ApprovalStatusEnum = z.enum(['pending', 'approved', 'rejected', 'revision_requested']);\nexport type ApprovalStatus = z.infer<typeof ApprovalStatusEnum>;\n\nexport const ProjectApprovalSchema = z.object({\n  id: z.string().uuid(),\n  project_id: z.string().uuid(),\n  version_id: z.string().uuid().nullable(),\n  requested_by: z.string().uuid(),\n  approved_by: z.string().nullable(),\n  client_access_link_id: z.string().uuid().nullable(),\n  status: ApprovalStatusEnum,\n  notes: z.string().nullable(),\n  approved_at: z.string().datetime().nullable(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type ProjectApproval = z.infer<typeof ProjectApprovalSchema>;\n\nexport const CommentPositionSchema = z.object({\n  x: z.number(),\n  y: z.number(),\n});\n\nexport type CommentPosition = z.infer<typeof CommentPositionSchema>;\n\nexport const ProjectCommentSchema = z.object({\n  id: z.string().uuid(),\n  project_id: z.string().uuid(),\n  parent_id: z.string().uuid().nullable(),\n  author_id: z.string().uuid().nullable(),\n  author_email: z.string().email().nullable(),\n  author_name: z.string().nullable(),\n  client_access_link_id: z.string().uuid().nullable(),\n  content: z.string(),\n  position: CommentPositionSchema.nullable(),\n  attachments: z.array(z.any()).default([]),\n  is_resolved: z.boolean().default(false),\n  resolved_by: z.string().uuid().nullable(),\n  resolved_at: z.string().datetime().nullable(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type ProjectComment = z.infer<typeof ProjectCommentSchema>;\n\n// Input schemas for API operations\nexport const CreateClientAccessLinkSchema = z.object({\n  projectId: z.string().uuid(),\n  clientEmail: z.string().email().optional(),\n  clientName: z.string().optional(),\n  permissions: ClientPermissionsSchema.optional(),\n  expiresIn: z.number().int().optional(), // Hours until expiration\n});\n\nexport type CreateClientAccessLinkInput = z.infer<typeof CreateClientAccessLinkSchema>;\n\nexport const CreateProjectApprovalSchema = z.object({\n  projectId: z.string().uuid(),\n  versionId: z.string().uuid().optional(),\n  notes: z.string().optional(),\n});\n\nexport type CreateProjectApprovalInput = z.infer<typeof CreateProjectApprovalSchema>;\n\nexport const UpdateApprovalStatusSchema = z.object({\n  approvalId: z.string().uuid(),\n  status: ApprovalStatusEnum,\n  notes: z.string().optional(),\n});\n\nexport type UpdateApprovalStatusInput = z.infer<typeof UpdateApprovalStatusSchema>;\n\nexport const CreateProjectCommentSchema = z.object({\n  projectId: z.string().uuid(),\n  content: z.string(),\n  parentId: z.string().uuid().optional(),\n  position: CommentPositionSchema.optional(),\n  clientAccessToken: z.string().optional(), // For client comments\n});\n\nexport type CreateProjectCommentInput = z.infer<typeof CreateProjectCommentSchema>;\n\nexport const ResolveCommentSchema = z.object({\n  commentId: z.string().uuid(),\n  resolved: z.boolean(),\n});\n\nexport type ResolveCommentInput = z.infer<typeof ResolveCommentSchema>;","import { z } from 'zod';\n\nexport const SubscriptionTierEnum = z.enum(['starter', 'professional', 'growth', 'enterprise']);\nexport type SubscriptionTier = z.infer<typeof SubscriptionTierEnum>;\n\nexport const SubscriptionStatusEnum = z.enum([\n  'active',\n  'canceled',\n  'incomplete',\n  'incomplete_expired',\n  'past_due',\n  'trialing',\n  'unpaid',\n]);\nexport type SubscriptionStatus = z.infer<typeof SubscriptionStatusEnum>;\n\nexport const PaymentStatusEnum = z.enum(['succeeded', 'failed', 'pending', 'refunded']);\nexport type PaymentStatus = z.infer<typeof PaymentStatusEnum>;\n\nexport const InvoiceStatusEnum = z.enum(['draft', 'open', 'paid', 'void', 'uncollectible']);\nexport type InvoiceStatus = z.infer<typeof InvoiceStatusEnum>;\n\nexport const SubscriptionPlanSchema = z.object({\n  id: z.string().uuid(),\n  name: z.string(),\n  stripe_price_id: z.string(),\n  tier: SubscriptionTierEnum,\n  price_monthly: z.number(),\n  price_yearly: z.number().nullable(),\n  render_credits_monthly: z.number(),\n  max_projects: z.number().nullable(),\n  max_team_members: z.number().nullable(),\n  features: z.record(z.any()),\n  is_active: z.boolean(),\n});\n\nexport type SubscriptionPlan = z.infer<typeof SubscriptionPlanSchema>;\n\nexport const PaymentMethodSchema = z.object({\n  id: z.string().uuid(),\n  organization_id: z.string().uuid(),\n  stripe_payment_method_id: z.string(),\n  type: z.string(),\n  brand: z.string().nullable(),\n  last4: z.string().nullable(),\n  exp_month: z.number().nullable(),\n  exp_year: z.number().nullable(),\n  is_default: z.boolean(),\n  created_at: z.string().datetime(),\n  updated_at: z.string().datetime(),\n});\n\nexport type PaymentMethod = z.infer<typeof PaymentMethodSchema>;\n\nexport const InvoiceSchema = z.object({\n  id: z.string().uuid(),\n  organization_id: z.string().uuid(),\n  stripe_invoice_id: z.string(),\n  invoice_number: z.string().nullable(),\n  status: InvoiceStatusEnum,\n  amount_due: z.number(),\n  amount_paid: z.number(),\n  currency: z.string(),\n  due_date: z.string().datetime().nullable(),\n  paid_at: z.string().datetime().nullable(),\n  period_start: z.string().datetime().nullable(),\n  period_end: z.string().datetime().nullable(),\n  stripe_hosted_invoice_url: z.string().nullable(),\n  stripe_invoice_pdf: z.string().nullable(),\n  metadata: z.record(z.any()),\n  created_at: z.string().datetime(),\n});\n\nexport type Invoice = z.infer<typeof InvoiceSchema>;\n\nexport const PaymentHistorySchema = z.object({\n  id: z.string().uuid(),\n  organization_id: z.string().uuid(),\n  invoice_id: z.string().uuid().nullable(),\n  stripe_payment_intent_id: z.string().nullable(),\n  stripe_charge_id: z.string().nullable(),\n  amount: z.number(),\n  currency: z.string(),\n  status: PaymentStatusEnum,\n  payment_method_id: z.string().uuid().nullable(),\n  failure_code: z.string().nullable(),\n  failure_message: z.string().nullable(),\n  refunded_amount: z.number(),\n  metadata: z.record(z.any()),\n  created_at: z.string().datetime(),\n});\n\nexport type PaymentHistory = z.infer<typeof PaymentHistorySchema>;\n\n// Input schemas for API operations\nexport const CreateCheckoutSessionSchema = z.object({\n  priceId: z.string(),\n  successUrl: z.string(),\n  cancelUrl: z.string(),\n});\n\nexport type CreateCheckoutSessionInput = z.infer<typeof CreateCheckoutSessionSchema>;\n\nexport const CreatePortalSessionSchema = z.object({\n  returnUrl: z.string(),\n});\n\nexport type CreatePortalSessionInput = z.infer<typeof CreatePortalSessionSchema>;\n\nexport const UpdateSubscriptionSchema = z.object({\n  priceId: z.string(),\n  prorationBehavior: z.enum(['create_prorations', 'none', 'always_invoice']).optional(),\n});\n\nexport type UpdateSubscriptionInput = z.infer<typeof UpdateSubscriptionSchema>;\n\nexport const CancelSubscriptionSchema = z.object({\n  cancelAtPeriodEnd: z.boolean().default(true),\n  reason: z.string().optional(),\n});\n\nexport type CancelSubscriptionInput = z.infer<typeof CancelSubscriptionSchema>;\n\nexport const AddPaymentMethodSchema = z.object({\n  paymentMethodId: z.string(),\n  setAsDefault: z.boolean().default(false),\n});\n\nexport type AddPaymentMethodInput = z.infer<typeof AddPaymentMethodSchema>;\n\n// Webhook event types\nexport const StripeWebhookEventSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  data: z.object({\n    object: z.record(z.any()),\n  }),\n  created: z.number(),\n});\n\nexport type StripeWebhookEvent = z.infer<typeof StripeWebhookEventSchema>;\n\n// Subscription features\nexport const PlanFeatures = {\n  starter: {\n    watermark: true,\n    exportFormats: ['png', 'jpg'],\n    support: 'community',\n    customBranding: false,\n    apiAccess: false,\n    sso: false,\n    maxStorageGb: 5,\n    maxRendersPerMonth: 25,\n    renderResolution: 'standard' as const,\n    canvasSizeLimit: '2000x2000',\n    versionHistoryDays: 7,\n    prioritySupport: false,\n    whiteLabel: false,\n    bulkExport: false,\n    advancedAnalytics: false,\n    clientPortal: false,\n    teamCollaboration: false,\n  },\n  professional: {\n    watermark: false,\n    exportFormats: ['png', 'jpg', 'svg', 'pdf'],\n    support: 'email',\n    customBranding: true,\n    apiAccess: false,\n    sso: false,\n    maxStorageGb: 50,\n    maxRendersPerMonth: 100,\n    renderResolution: 'high' as const,\n    canvasSizeLimit: '5000x5000',\n    versionHistoryDays: 30,\n    prioritySupport: false,\n    whiteLabel: false,\n    bulkExport: true,\n    advancedAnalytics: false,\n    clientPortal: true,\n    teamCollaboration: true,\n  },\n  growth: {\n    watermark: false,\n    exportFormats: ['png', 'jpg', 'svg', 'pdf', 'dxf'],\n    support: 'priority',\n    customBranding: true,\n    apiAccess: true,\n    sso: false,\n    maxStorageGb: 200,\n    maxRendersPerMonth: 500,\n    renderResolution: 'ultra' as const,\n    canvasSizeLimit: '10000x10000',\n    versionHistoryDays: 90,\n    prioritySupport: true,\n    whiteLabel: true,\n    bulkExport: true,\n    advancedAnalytics: true,\n    clientPortal: true,\n    teamCollaboration: true,\n  },\n  enterprise: {\n    watermark: false,\n    exportFormats: ['png', 'jpg', 'svg', 'pdf', 'dxf', 'dwg'],\n    support: 'dedicated',\n    customBranding: true,\n    apiAccess: true,\n    sso: true,\n    maxStorageGb: -1, // Unlimited\n    maxRendersPerMonth: -1, // Unlimited\n    renderResolution: 'ultra' as const,\n    canvasSizeLimit: 'unlimited',\n    versionHistoryDays: -1, // Unlimited\n    prioritySupport: true,\n    whiteLabel: true,\n    bulkExport: true,\n    advancedAnalytics: true,\n    clientPortal: true,\n    teamCollaboration: true,\n    customContract: true,\n    dedicatedAccountManager: true,\n    sla: true,\n    customIntegrations: true,\n  },\n} as const;\n\n// Plan limits type\nexport const PlanLimitsSchema = z.object({\n  maxProjects: z.number().nullable(),\n  maxTeamMembers: z.number().nullable(),\n  maxStorageGb: z.number(),\n  maxRendersPerMonth: z.number(),\n  renderCreditsMonthly: z.number(),\n});\n\nexport type PlanLimits = z.infer<typeof PlanLimitsSchema>;\n\n// Usage limit check result\nexport const UsageLimitCheckSchema = z.object({\n  limit: z.number(),\n  usage: z.number(),\n  remaining: z.number(),\n  exceeded: z.boolean(),\n  percentage: z.number(),\n});\n\nexport type UsageLimitCheck = z.infer<typeof UsageLimitCheckSchema>;","export interface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  target?: string; // CSS selector for element to highlight\n  placement?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  action?: {\n    label: string;\n    onClick?: () => void;\n  };\n  skipLabel?: string;\n  canSkip?: boolean;\n}\n\nexport interface OnboardingFlow {\n  id: string;\n  name: string;\n  description: string;\n  steps: OnboardingStep[];\n  completionAction?: () => void;\n}\n\nexport interface OnboardingState {\n  currentFlowId: string | null;\n  currentStepIndex: number;\n  completedFlows: string[];\n  skippedFlows: string[];\n  lastSeenAt: string | null;\n  preferences: {\n    showTooltips: boolean;\n    showKeyboardShortcuts: boolean;\n  };\n}\n\nexport interface UserOnboardingProgress {\n  userId: string;\n  hasCompletedInitialSetup: boolean;\n  hasSeenDashboardTour: boolean;\n  hasCreatedFirstProject: boolean;\n  hasUsedDesignTools: boolean;\n  hasExportedDesign: boolean;\n  toolsUsed: string[];\n  featuresDiscovered: string[];\n  lastActivityAt: string;\n}\n\nexport const ONBOARDING_FLOWS = {\n  INITIAL_SETUP: 'initial-setup',\n  DASHBOARD_TOUR: 'dashboard-tour',\n  DESIGN_CANVAS_INTRO: 'design-canvas-intro',\n  DRAWING_TOOLS: 'drawing-tools',\n  PLANT_LIBRARY: 'plant-library',\n  LAYERS_AND_PROPERTIES: 'layers-and-properties',\n  EXPORT_AND_SHARE: 'export-and-share',\n} as const;\n\nexport type OnboardingFlowId = typeof ONBOARDING_FLOWS[keyof typeof ONBOARDING_FLOWS];","import { SubscriptionTier, PlanFeatures } from '../types/billing';\n\nexport class FeatureGateService {\n  /**\n   * Check if a feature is available for a given subscription tier\n   */\n  static hasFeature(tier: SubscriptionTier | null, featureName: keyof typeof PlanFeatures.starter): boolean {\n    const currentTier = tier || 'starter';\n    const features = PlanFeatures[currentTier];\n    \n    if (!features) {\n      return false;\n    }\n\n    const featureValue = features[featureName];\n\n    // Handle different types of feature values\n    if (typeof featureValue === 'boolean') {\n      return featureValue;\n    }\n\n    if (typeof featureValue === 'number') {\n      return featureValue > 0 || featureValue === -1; // -1 means unlimited\n    }\n\n    if (typeof featureValue === 'string') {\n      return featureValue.length > 0;\n    }\n\n    if (Array.isArray(featureValue)) {\n      return featureValue.length > 0;\n    }\n\n    return featureValue != null;\n  }\n\n  /**\n   * Check if a usage limit is exceeded\n   */\n  static checkUsageLimit(\n    tier: SubscriptionTier | null,\n    limitType: 'maxProjects' | 'maxTeamMembers' | 'maxStorageGb' | 'maxRendersPerMonth',\n    currentUsage: number\n  ): {\n    limit: number;\n    usage: number;\n    remaining: number;\n    exceeded: boolean;\n    percentage: number;\n  } {\n    const currentTier = tier || 'starter';\n    const features = PlanFeatures[currentTier];\n    \n    if (!features) {\n      return {\n        limit: 0,\n        usage: currentUsage,\n        remaining: 0,\n        exceeded: true,\n        percentage: 100,\n      };\n    }\n\n    const limit = (features as any)[limitType] as number;\n    const isUnlimited = limit === -1;\n\n    return {\n      limit,\n      usage: currentUsage,\n      remaining: isUnlimited ? -1 : Math.max(0, limit - currentUsage),\n      exceeded: !isUnlimited && currentUsage > limit,\n      percentage: isUnlimited ? 0 : Math.round((currentUsage / limit) * 100),\n    };\n  }\n\n  /**\n   * Get all features for a given tier\n   */\n  static getFeaturesForTier(tier: SubscriptionTier | null) {\n    const currentTier = tier || 'starter';\n    return PlanFeatures[currentTier] || PlanFeatures.starter;\n  }\n\n  /**\n   * Compare features between two tiers\n   */\n  static compareFeatures(fromTier: SubscriptionTier, toTier: SubscriptionTier) {\n    const fromFeatures = PlanFeatures[fromTier];\n    const toFeatures = PlanFeatures[toTier];\n\n    const comparison: {\n      feature: string;\n      from: any;\n      to: any;\n      isUpgrade: boolean;\n    }[] = [];\n\n    // Compare all features\n    const allFeatureKeys = new Set([\n      ...Object.keys(fromFeatures),\n      ...Object.keys(toFeatures),\n    ]) as Set<keyof typeof PlanFeatures.starter>;\n\n    for (const key of allFeatureKeys) {\n      const fromValue = fromFeatures[key];\n      const toValue = toFeatures[key];\n\n      let isUpgrade = false;\n\n      if (typeof fromValue === 'boolean' && typeof toValue === 'boolean') {\n        isUpgrade = !fromValue && toValue;\n      } else if (typeof fromValue === 'number' && typeof toValue === 'number') {\n        isUpgrade = toValue > fromValue || (toValue === -1 && fromValue !== -1);\n      } else if (Array.isArray(fromValue) && Array.isArray(toValue)) {\n        isUpgrade = toValue.length > fromValue.length;\n      } else if (typeof fromValue === 'string' && typeof toValue === 'string') {\n        // Custom logic for support levels\n        if (key === 'support') {\n          const supportLevels = ['community', 'email', 'priority', 'dedicated'];\n          isUpgrade = supportLevels.indexOf(toValue) > supportLevels.indexOf(fromValue);\n        } else if (key === 'renderResolution') {\n          const resolutionLevels = ['standard', 'high', 'ultra'];\n          isUpgrade = resolutionLevels.indexOf(toValue) > resolutionLevels.indexOf(fromValue);\n        }\n      }\n\n      comparison.push({\n        feature: key,\n        from: fromValue,\n        to: toValue,\n        isUpgrade,\n      });\n    }\n\n    return comparison;\n  }\n\n  /**\n   * Get tier ranking (for upgrade/downgrade logic)\n   */\n  static getTierRank(tier: SubscriptionTier): number {\n    const ranks: Record<SubscriptionTier, number> = {\n      starter: 0,\n      professional: 1,\n      growth: 2,\n      enterprise: 3,\n    };\n    return ranks[tier] ?? 0;\n  }\n\n  /**\n   * Check if moving from one tier to another is an upgrade\n   */\n  static isUpgrade(fromTier: SubscriptionTier, toTier: SubscriptionTier): boolean {\n    return this.getTierRank(toTier) > this.getTierRank(fromTier);\n  }\n\n  /**\n   * Get available export formats for a tier\n   */\n  static getExportFormats(tier: SubscriptionTier | null): string[] {\n    const features = this.getFeaturesForTier(tier);\n    return [...(features.exportFormats || ['png', 'jpg'])];\n  }\n\n  /**\n   * Check if a specific export format is available\n   */\n  static canExportFormat(tier: SubscriptionTier | null, format: string): boolean {\n    const formats = this.getExportFormats(tier);\n    return formats.includes(format.toLowerCase());\n  }\n\n  /**\n   * Get render resolution for a tier\n   */\n  static getRenderResolution(tier: SubscriptionTier | null): 'standard' | 'high' | 'ultra' {\n    const features = this.getFeaturesForTier(tier);\n    return features.renderResolution || 'standard';\n  }\n\n  /**\n   * Check if a feature requires a specific minimum tier\n   */\n  static getMinimumTierForFeature(featureName: keyof typeof PlanFeatures.starter): SubscriptionTier | null {\n    const tiers: SubscriptionTier[] = ['starter', 'professional', 'growth', 'enterprise'];\n    \n    for (const tier of tiers) {\n      if (this.hasFeature(tier, featureName)) {\n        return tier;\n      }\n    }\n    \n    return null;\n  }\n}"],"mappings":"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","names":["import_zod","import_zod"]}